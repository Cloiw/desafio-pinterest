{"version":3,"sources":["img/logo.svg","components/Navbar.js","components/Image.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","logo","alt","React","Component","Image","this","props","url","Body","state","images","perpage","page","urls","handleScroll","bind","docHeight","document","body","offsetHeight","windowBottom","window","innerHeight","scrollY","console","log","getImages","addEventListener","fetch","then","res","json","stateImages","all","concat","hits","urlsA","map","item","index","largeImageURL","unique","Set","setState","key","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,gOCsC5BC,G,uLA/BP,OACE,oCACA,6BACA,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,YACX,uBAAGC,KAAK,KACJ,yBAAKD,UAAU,gBAAgBE,IAAKC,IAAMC,IAAI,WAGtD,yBAAKJ,UAAU,eAGf,yBAAKA,UAAU,YACb,yCAEF,yBAAKA,UAAU,cACf,mD,GAlBSK,IAAMC,Y,cCeZC,G,sLAVT,OACI,oCACA,4BACA,yBAAMP,UAAU,aAAaE,IAAKM,KAAKC,MAAMC,Y,GARnCL,IAAMC,YCmFXK,E,YAjFb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CAACC,OAAS,GAAIC,QAAS,GAAIC,KAAK,EAAGC,KAAO,IACvD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHT,E,4EAOX,IAAMC,EAAYC,SAASC,KAAKC,aAC1BC,EAAeC,OAAOC,YAAcD,OAAOE,QAGjD,GAAIH,GAAgBJ,EAAU,GAI5B,OAHAQ,QAAQC,IAAIL,GACZI,QAAQC,IAAIT,GACZQ,QAAQC,IAAI,OACLpB,KAAKqB,c,0CASbrB,KAAKqB,UAAU,GAChBL,OAAOM,iBAAiB,SAAUtB,KAAKS,gB,2CAMvCO,OAAOM,iBAAiB,SAAUtB,KAAKS,gB,kCAG7B,IAAD,OACTc,MAAM,kFAAkFvB,KAAKI,MAAME,QAAQ,SAASN,KAAKI,MAAMG,KAAK,qBACnIiB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAEJ,IAAIE,EAAW,YAAO,EAAKvB,MAAMC,QAC7BuB,EAAMD,EAAYE,OAAOJ,EAAIK,MAC7BC,EAAQH,EAAII,IAAI,SAASC,EAAKC,GAChC,OAAOD,EAAKE,gBAEdhB,QAAQC,IAAIO,GACZR,QAAQC,IAAIQ,GACZT,QAAQC,IAAIW,GACZ,IAAMK,EAAM,YAAQ,IAAIC,IAAIN,IAS5B,OARAZ,QAAQC,IAAIgB,GAQT,EAAKhC,MAAMC,SAAW,GAElB,EAAKiC,SAAS,CAAC9B,KAAMuB,EAAOzB,QAAS,EAAKF,MAAME,QAAQ,GAAIC,KAAM,EAAKH,MAAMG,SAG7E,EAAK+B,SAAS,CAACjC,OAAQ,EAAKD,MAAMC,OAAOC,QAAQ,EAAKF,MAAME,c,+BAMjE,OACE,oCACF,yBAAKd,UAAU,gBACX,4BACAQ,KAAKI,MAAMI,KAAKwB,IAAI,SAASC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAQK,IAAKL,EAAOhC,IAAK+B,a,GAzE1BpC,IAAMC,W,MCYV0C,MAZf,WACE,OAEI,6BACE,gCACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCDYC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASmC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.db4cf954.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.84d16ae0.svg\";","import React from 'react';\nimport logo from '../img/logo.svg';\nimport './styles/Navbar.css';\n\n\nclass Navbar extends React.Component{ \n    render() {\n        return (\n          <>\n          <nav>\n          <div className=\"nav-container\">\n            <div className=\"nav-logo\">\n                <a href=\"/\">\n                    <img className=\"nav-logo-icon\" src={logo} alt=\"logo\"/> \n                </a> \n            </div>\n            <div className=\"nav-search\">\n\n            </div>\n            <div className=\"nav-home\">\n              <span>Inicio</span>\n            </div>\n            <div className=\"nav-follow\">\n            <span>Siguiendo</span>\n            </div>\n           \n            </div>\n          </nav>\n\n\n\n          \n\n        </>\n    );\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport './styles/Body.css';\n\n\n\nclass Image extends React.Component{ \n\n  \n    render() {\n    \n      return (\n          <>\n          <li>\n          <img  className=\"image-size\" src={this.props.url}/>\n          </li>\n        </>\n    );\n  }\n}\n\nexport default Image","import React from 'react';\nimport Images from './Image'\nimport './styles/Body.css';\n\n\n\nclass Body extends React.Component{ \n  constructor(){\n    super();\n    this.state = {images : [], perpage: 20, page:1, urls : []}\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  handleScroll(){\n    const docHeight = document.body.offsetHeight\n    const windowBottom = window.innerHeight + window.scrollY\n   \n    \n    if (windowBottom >= docHeight-10) {\n      console.log(windowBottom)\n      console.log(docHeight)\n      console.log(\"ola\")\n      return this.getImages();\n      };\n      \n    }\n    \n  \n  \n\n  componentDidMount(){\n     this.getImages(1);\n    window.addEventListener(\"scroll\", this.handleScroll);\n    \n    \n  }\n \n  componentDidUpdate() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  getImages(){\n    fetch(\"https://pixabay.com/api/?key=13304993-75bbe84ca66872b048431504a&q=fox&per_page=\"+this.state.perpage+\"&page=\"+this.state.page+\"&image_type=photo\")\n    .then(res => res.json())\n    .then(res=>{\n      \n      let stateImages = [...this.state.images]\n      let all = stateImages.concat(res.hits)\n      let urlsA = all.map(function(item,index){\n        return item.largeImageURL\n      })\n      console.log(stateImages)\n      console.log(all)\n      console.log(urlsA)\n      const unique =  [...new Set(urlsA)];\n      console.log(unique)\n      \n     \n      \n      \n\n      \n      \n      if(this.state.images !== []){\n        \n      return this.setState({urls: urlsA ,perpage:(this.state.perpage+20),page:(this.state.page++)})\n      }\n      \n      return this.setState({images: this.state.images,perpage:this.state.perpage})\n    \n    })\n      \n  }\n    render() {\n        return (\n          <>\n        <div className=\"content-body\">\n            <ul>\n           {this.state.urls.map(function(item,index){\n             return <Images key={index} url={item}/>\n           })}\n            </ul>\n    </div> \n        </>\n    );\n  }\n}\n\nexport default Body;\n\n\n\n// {this.state.images.map(function(item,index){\n//   return <Images key={index} url={item.largeImageURL}/>\n// })}","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Body from './components/Body'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    \n      <div>\n        <header>\n          <Navbar/>\n        </header>\n        <Body/>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}