{"version":3,"sources":["img/logo.svg","components/Navbar.js","components/Image.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","logo","alt","React","Component","Image","this","props","url","Body","state","images","urls","viewModal","viewImages","handleScroll","bind","loadingImages","currentPage","docHeight","document","body","offsetHeight","window","innerHeight","scrollY","getImages","addEventListener","prevProps","prevState","length","fetch","then","res","json","newLinks","hits","map","item","index","largeImageURL","allLinks","concat","setState","class","key","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,gOCsC5BC,G,uLA/BP,OACE,oCACA,6BACA,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,YACX,uBAAGC,KAAK,KACJ,yBAAKD,UAAU,gBAAgBE,IAAKC,IAAMC,IAAI,WAGtD,yBAAKJ,UAAU,eAGf,yBAAKA,UAAU,YACb,yCAEF,yBAAKA,UAAU,cACf,mD,GAlBSK,IAAMC,Y,eCeZC,G,sLAVT,OACI,oCAEA,yBAAMP,UAAU,aAAaE,IAAKM,KAAKC,MAAMC,W,GARnCL,IAAMC,YC6GXK,E,YA3Gb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CAACC,OAAS,GAAGC,KAAO,GAAGC,WAAU,EAAMC,YAAW,GAC/D,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAgB,EACrB,EAAKC,YAAc,EALR,E,4EASX,IAAMC,EAAYC,SAASC,KAAKC,aAGhC,GAFqBC,OAAOC,YAAcD,OAAOE,SAE7BN,EAAU,GAC5B,OAAOb,KAAKoB,c,0CAMdpB,KAAKoB,YACLH,OAAOI,iBAAiB,SAAUrB,KAAKS,gB,yCAGtBa,EAAUC,GACxBA,EAAUjB,KAAKkB,SAAWxB,KAAKI,MAAME,KAAKkB,SAC3CxB,KAAKW,eAAgB,K,kCAIb,IAAD,QACiB,IAAvBX,KAAKW,gBAIRX,KAAKW,eAAgB,EACrBc,MAAM,0FAA0FzB,KAAKY,YAAY,qBAChHc,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACJ,IAAIE,EAAWF,EAAIG,KAAKC,IAAI,SAASC,EAAMC,GAC3C,OAAOD,EAAKE,gBAIRC,EADS,YAAO,EAAK/B,MAAME,MACN8B,OAAOP,GAChC,EAAKjB,cACL,EAAKyB,SAAS,CAAC/B,KAAK6B,EAAS9B,OAAOsB,EAAIG,Y,kCAS1C9B,KAAKqC,SAAS,CACZ7B,YAAW,EACXD,WAAU,M,+BAKR,OACE,oCACF,yBAAKf,UAAU,gBAEb,yBAAK8C,MAAM,UACRtC,KAAKI,MAAME,KAAKyB,IAAI,SAASC,EAAKC,GAC/B,GAAGA,EAAM,IAAM,EACb,OAAO,kBAAC,EAAD,CAAQM,IAAKN,EAAO/B,IAAK8B,OAMxC,yBAAKM,MAAM,UACRtC,KAAKI,MAAME,KAAKyB,IAAI,SAASC,EAAKC,GAC/B,GAAGA,EAAM,IAAM,EACb,OAAO,kBAAC,EAAD,CAAQM,IAAKN,EAAO/B,IAAK8B,OAMxC,yBAAKM,MAAM,UACRtC,KAAKI,MAAME,KAAKyB,IAAI,SAASC,EAAKC,GAC/B,GAAGA,EAAM,IAAM,EACb,OAAO,kBAAC,EAAD,CAAQM,IAAKN,EAAO/B,IAAK8B,OAMxC,yBAAKM,MAAM,UACRtC,KAAKI,MAAME,KAAKyB,IAAI,SAASC,EAAKC,GAC/B,GAAGA,EAAM,IAAM,EACb,OAAO,kBAAC,EAAD,CAAQM,IAAKN,EAAO/B,IAAK8B,a,GAhG/BnC,IAAMC,W,MCYV0C,MAZf,WACE,OAEI,6BACE,gCACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCDYC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASiC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.5fdb3df1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.84d16ae0.svg\";","import React from 'react';\nimport logo from '../img/logo.svg';\nimport './styles/Navbar.css';\n\n\nclass Navbar extends React.Component{ \n    render() {\n        return (\n          <>\n          <nav>\n          <div className=\"nav-container\">\n            <div className=\"nav-logo\">\n                <a href=\"/\">\n                    <img className=\"nav-logo-icon\" src={logo} alt=\"logo\"/> \n                </a> \n            </div>\n            <div className=\"nav-search\">\n\n            </div>\n            <div className=\"nav-home\">\n              <span>Inicio</span>\n            </div>\n            <div className=\"nav-follow\">\n            <span>Siguiendo</span>\n            </div>\n           \n            </div>\n          </nav>\n\n\n\n          \n\n        </>\n    );\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport './styles/Body.css';\n\n\n\nclass Image extends React.Component{ \n\n  \n    render() {\n    \n      return (\n          <>\n          \n          <img  className=\"image-size\" src={this.props.url}/>\n          \n        </>\n    );\n  }\n}\n\nexport default Image","import React from 'react';\nimport Images from './Image'\nimport './styles/Body.css';\n\n\n\nclass Body extends React.Component{ \n  constructor(){\n    super();\n    this.state = {images : [],urls : [],viewModal:false,viewImages:true}\n    this.handleScroll = this.handleScroll.bind(this);\n    this.loadingImages = false;\n    this.currentPage = 1;\n  }\n\n  handleScroll(){\n    const docHeight = document.body.offsetHeight\n    const windowBottom = window.innerHeight + window.scrollY\n    \n    if (windowBottom >= docHeight-10) {\n      return this.getImages();\n      };\n    }\n  \n\n  componentDidMount(){\n    this.getImages();\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if(prevState.urls.length !== this.state.urls.length){\n      this.loadingImages = false;\n    }\n  }\n\n  getImages(){\n    if(this.loadingImages === true){\n      return;\n    }\n\n    this.loadingImages = true;\n    fetch(\"https://pixabay.com/api/?key=13304993-75bbe84ca66872b048431504a&q=fox&per_page=20&page=\"+this.currentPage+\"&image_type=photo\")\n    .then(res => res.json())\n    .then(res=>{\n      let newLinks = res.hits.map(function(item, index) {\n      return item.largeImageURL\n      })\n\n      let stateUrls = [...this.state.urls]\n      let allLinks = stateUrls.concat(newLinks)\n      this.currentPage++;\n      this.setState({urls:allLinks,images:res.hits});\n      \n    })\n      \n  }\n\n \n\n  showModal(){\n    this.setState({\n      viewImages:false,\n      viewModal:true\n    })\n  }\n\n    render() {\n        return (\n          <>\n        <div className=\"content-body\">\n            \n          <div class=\"column\">\n            {this.state.urls.map(function(item,index){\n                if(index%4 === 0){\n                  return <Images key={index} url={item}/>\n                }\n              })\n            }\n          </div>\n\n          <div class=\"column\">\n            {this.state.urls.map(function(item,index){\n                if(index%4 === 1){\n                  return <Images key={index} url={item}/>\n                }\n              })\n            }\n          </div>\n\n          <div class=\"column\">\n            {this.state.urls.map(function(item,index){\n                if(index%4 === 2){\n                  return <Images key={index} url={item}/>\n                }\n              })\n            }\n          </div>\n\n          <div class=\"column\">\n            {this.state.urls.map(function(item,index){\n                if(index%4 === 3){\n                  return <Images key={index} url={item}/>\n                }\n              })\n            }\n          </div>\n            \n    </div> \n        </>\n    );\n  }\n}\n\nexport default Body;\n\n\n\n// {this.state.images.map(function(item,index){\n//   return <Images key={index} url={item.largeImageURL}/>\n// })}","import React from 'react';\nimport Navbar from './components/Navbar'\nimport Body from './components/Body'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    \n      <div>\n        <header>\n          <Navbar/>\n        </header>\n        <Body/>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}